{"version":3,"sources":["components/Header.js","components/Home.js","components/FavouritesItem.js","components/FavouritesList.js","components/PlayFilters.js","components/FavouriteButton.js","components/PlayMatches.js","components/PlayList.js","components/PlayOverview.js","components/PlayDataTabBar.js","components/PlayDataView.js","components/PlayData.js","components/PlayDetailApp.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","to","onClick","toggleModal","Home","id","type","title","document","getElementById","value","setFilteredPlays","FavouritesItem","play","console","log","setCurrentPlay","removeFromFavourites","FavouritesList","toggleArrowSymbol","parentElement","querySelector","toggleButton","classList","contains","innerHTML","favourites","map","p","toggle","PlayFilters","genres","g","i","before","checked","beforeYear","after","afterYear","genre","FavouriteButton","addToFavourites","PlayMatches","handleHeaderClick","e","target","handleViewClick","plays","length","likelyDate","PlayList","filters","PlayOverview","handleFavouritesClick","handleSelectChange","name","setPlayFilter","currentTab","acts","playData","scenes","currentAct","characters","push","uniq","currentScene","speeches","s","speaker","onChange","a","c","placeholder","setSearchText","synopsis","PlayDataTabBar","handleOnClick","setCurrentTab","getClassName","t","tabs","PlayDataView","href","wiki","gutenberg","shakespeareOrg","desc","persona","player","stageDirection","filter","currentCharacter","lines","l","searchWords","searchText","textToHighlight","PlayData","PlayDetailApp","state","filename","this","foundPlayData","savedPlayData","find","url","fetch","response","json","data","setState","savePlayData","error","foundAct","foundScene","text","tab","React","Component","About","isOpen","modalIsOpen","contentLabel","App","currentPlay","filteredPlays","orderType","reset","cloneDeep","toLowerCase","includes","sort","b","aTitle","bTitle","Number","favouritesCopy","index","findIndex","splice","path","exact","transitionName","transitionAppear","transitionAppearTimeout","transitionEnterTimeout","transitionLeaveTimeout","playDataCopy","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.becec9ba.chunk.js","sourcesContent":["import React from \"react\";\nimport {Link} from 'react-router-dom';\nimport \"./css/Header.css\";\n\nconst Header = (props) => {\n    const handleOnClick = () => {\n        props.toggleModal();\n    }\n    \n    return (\n        <div className=\"header\">\n            <Link to=\"/\"><span>Play Browser</span></Link>\n            <button onClick={handleOnClick}>About</button>\n        </div>\n    );\n};\n\nexport default Header","import React from \"react\";\nimport {Link} from 'react-router-dom';\nimport \"./css/Home.css\";\n\nconst Home = (props) => {\n    const handleMatchingClick = () => {\n        const title = document.getElementById(\"title\").value;\n        props.setFilteredPlays({\"title\": title}, \"title\");\n    }\n    \n    const handleAllClick = () => {\n        props.setFilteredPlays({}, \"title\");\n    }\n    \n    return (\n        <div className=\"home\">\n            <article className=\"article\">\n                <form className=\"form\">\n                    <legend>Play Browser</legend>\n                    <label>Search Play Title</label><input id=\"title\" type=\"text\"/><br/>\n                    <Link to=\"/play-list\"><button onClick={handleMatchingClick}>Show Matching Plays</button></Link>\n                    <Link to=\"/play-list\"><button onClick={handleAllClick}>Show All Plays</button></Link><br/>\n                </form>\n            </article>\n            <p>Phantom of the Opera at Istana Budaya, Kuala Lumpur. World Tour 2019.</p>\n        </div>\n    );\n};\n\nexport default Home","import React from \"react\";\nimport {Link} from 'react-router-dom';\nimport \"./css/FavouritesItem.css\";\n\nconst FavouritesItem = (props) => {\n    const handleOnClick = () => {\n        props.removeFromFavourites(props.play);\n    }\n    \n    const handleViewClick = (play) => {\n        console.log(play);\n        props.setCurrentPlay(play);\n    }\n    \n    return (\n        <div className=\"favourites-item\">\n            <Link to=\"/play-detail\"><span onClick={() => {handleViewClick(props.play)}}>{props.play.title}</span></Link>\n            <button onClick={handleOnClick}>Remove</button>\n        </div>\n    );\n};\n\nexport default FavouritesItem","import React from \"react\";\nimport FavouritesItem from \"./FavouritesItem.js\";\nimport \"./css/FavouritesList.css\";\n\nconst FavouritesList = (props) => {\n    const handleToggleClick = () => {\n        //toggle favourites visibility\n        let parentElement = document.querySelector(\".favourites-list\").parentElement; \n        parentElement.classList.toggle(\"hide-favourites\");\n        toggleArrowSymbol();\n    }\n    \n    const toggleArrowSymbol = () => {\n        //get appropriate arrow symbol\n        let parentElement = document.querySelector(\".favourites-list\").parentElement; \n        let toggleButton = document.getElementById(\"toggle-button\");\n        \n        if (parentElement.classList.contains(\"hide-favourites\")) {toggleButton.innerHTML = \"▶\"}\n        else {toggleButton.innerHTML = \"◀\"}\n    }\n    \n    if (props.favourites) {\n        return (\n            <div className=\"favourites-list\">\n                <h1>Favourites</h1>\n                <ul>\n                {props.favourites.map((p) => \n                    <li key={p.id}>\n                        <FavouritesItem play={p} \n                                        removeFromFavourites={props.removeFromFavourites} \n                                        setCurrentPlay={props.setCurrentPlay}/>\n                    </li>\n                )}\n                </ul>\n                <button id=\"toggle-button\" onClick={handleToggleClick}>◀</button>\n            </div>\n        );\n    }\n    else {\n        return null;\n    }\n};\n\nexport default FavouritesList","import React from \"react\";\nimport \"./css/PlayFilters.css\";\n\nconst PlayFilters = (props) => {\n    const handleFilterClick = () => {\n        //get value from each input element\n        const title = document.getElementById(\"title\").value;\n        const before = document.getElementById(\"before\").checked;\n        const beforeYear = document.getElementById(\"beforeYear\").value;\n        const after = document.getElementById(\"after\").checked;\n        const afterYear = document.getElementById(\"afterYear\").value;\n        const genre = document.getElementById(\"genre\").value;\n        \n        //filter plays with input values\n        props.setFilteredPlays({\"title\": title,\n                                \"before\": before,\n                                \"beforeYear\": beforeYear,\n                                \"after\": after,\n                                \"afterYear\": afterYear,\n                                \"genre\": genre\n                               }, null, true);\n    }\n    \n    const handleClearClick = () => {\n        //set input values to initial values\n        document.getElementById(\"title\").value = \"\";\n        document.getElementById(\"before\").checked = false;\n        document.getElementById(\"beforeYear\").value = \"\";\n        document.getElementById(\"after\").checked = false;\n        document.getElementById(\"afterYear\").value = \"\";\n        document.getElementById(\"genre\").value = \"\";\n        \n        //remove filters from plays\n        props.setFilteredPlays({}, null, true);\n    }\n    \n    \n    return (\n        <div className=\"play-filters\">\n            <form className=\"filter-form\">\n                <h1 className=\"filter-header\">Play Filters</h1>\n                <label className=\"main\">Title</label><br/>\n                <input className=\"full\" id=\"title\" type=\"text\"/><br/>\n                <label className=\"main\">Year</label><br/>\n                <div className=\"before-filters\">\n                    <input id=\"before\" type=\"checkbox\"/><label className=\"sub\">Before:</label>\n                    <input className=\"partial\" id=\"beforeYear\" type=\"text\"/>\n                </div>\n                <div className=\"after-filters\">\n                    <input id=\"after\" type=\"checkbox\"/><label className=\"sub\">After:</label>\n                    <input className=\"partial\" id=\"afterYear\" type=\"text\"/>\n                </div>\n                <label className=\"main\">Genre</label><br/>\n                <select id=\"genre\">\n                    {props.genres.map((g, i) => \n                        <option key={i} value={g}>{g}</option>                          \n                    )}\n                </select>\n            </form>\n            <div className=\"button-container\">\n                <button className=\"filter-button\" onClick={handleFilterClick}>Filter</button>\n                <button className=\"filter-button\" onClick={handleClearClick}>Clear</button>\n            </div>\n        </div>\n    );\n};\n\nexport default PlayFilters","import React from \"react\";\n\nconst FavouriteButton = (props) => {\n    const handleOnClick = () => {\n        props.addToFavourites(props.play);\n    }\n    \n    return (\n        <button onClick={handleOnClick}>♥</button>\n    );\n};\n\nexport default FavouriteButton","import React from \"react\";\nimport {Link} from 'react-router-dom';\nimport FavouriteButton from \"./FavouriteButton.js\";\nimport \"./css/PlayMatches.css\";\n\nconst PlayMatches = (props) => {\n    const handleHeaderClick = (e) => {\n        //sort plays by selected sort type\n        props.setFilteredPlays({}, e.target.title, false);\n    }\n    \n    const handleViewClick = (play) => {\n        props.setCurrentPlay(play);\n    }\n    \n    if (props.plays && props.plays.length > 0) {\n        return (\n            <div className=\"play-matches\">\n                <h1>List/Matches</h1>\n                <table>\n                    <thead>\n                        <tr>\n                            <th title=\"title\" onClick={handleHeaderClick}>Title</th>\n                            <th title=\"year\" onClick={handleHeaderClick}>Year</th>  \n                            <th></th>\n                            <th></th>\n                        </tr>\n                    </thead>\n                </table>\n                <hr/>\n                <div className=\"table-body\">\n                    <table>\n                        <tbody>\n                        {props.plays.map((p) => \n                            <tr key={p.id}>\n                                <td onClick={() => {handleViewClick(p)}}><Link to=\"/play-detail\">{p.title}</Link></td>\n                                <td>{p.likelyDate}</td>\n                                <td><FavouriteButton play={p} addToFavourites={props.addToFavourites}/></td>\n                                <td><Link to=\"/play-detail\"><button onClick={() => {handleViewClick(p)}}>View</button></Link></td>\n                            </tr>\n                        )}\n                        </tbody>\n                    </table>\n                </div>\n                <hr/>\n            </div>\n        );\n    }\n    else {\n        return (\n            <div className=\"play-matches\">\n                <h1>List/Matches</h1>\n                <p>No plays found!</p>\n            </div>\n        )\n    }\n};\n\nexport default PlayMatches","import React from \"react\";\nimport {CSSTransitionGroup} from 'react-transition-group';\nimport FavouritesList from \"./FavouritesList.js\";\nimport PlayFilters from \"./PlayFilters.js\";\nimport PlayMatches from \"./PlayMatches.js\";\nimport \"./css/PlayList.css\";\n\nconst PlayList = (props) => {\n    return (\n        <div className=\"play-list\">\n                <FavouritesList favourites={props.favourites} \n                                removeFromFavourites={props.removeFromFavourites} \n                                setCurrentPlay={props.setCurrentPlay}/>\n                <PlayFilters filters={props.filters} \n                             setFilteredPlays={props.setFilteredPlays} \n                             genres={props.genres}/>\n                <PlayMatches plays={props.plays} \n                             setFilteredPlays={props.setFilteredPlays} \n                             addToFavourites={props.addToFavourites} \n                             setCurrentPlay={props.setCurrentPlay}/>\n\n        </div>\n//        <CSSTransitionGroup transitionName=\"favourites\" \n//                            transitionAppear={true} \n//                            transitionAppearTimeout={500}\n//                            transitionEnterTimeout={500} \n//                            transitionLeaveTimeout={500}>\n//        </CSSTransitionGroup>\n    );\n};\n\nexport default PlayList","import React from \"react\";\nimport {Link} from 'react-router-dom';\nimport {uniq} from 'lodash';\nimport \"./css/PlayOverview.css\";\n\nconst PlayOverview = (props) => {\n    const handleFavouritesClick = () => {\n        props.addToFavourites(props.play);\n    }\n    \n    const handleSelectChange = (e) => {\n        const {name, value} = e.target;\n        props.setPlayFilter(name, value);\n    }\n    \n    const handleTextChange = (e) => {\n        props.setSearchText(e.target.value);\n    }\n    \n    //if current tab is text, deisplay filter options\n    if (props.currentTab === \"Text\") {\n        const acts = props.playData.acts;\n        const scenes = props.currentAct.scenes;\n        const characters = [\"All Players\"]; //add all players to list of characters\n        characters.push(...uniq(props.currentScene.speeches.map((s) => s.speaker)));\n        \n        return (\n            <div className=\"play-overview\">\n                <h1>{props.play.title}</h1>\n                <select name=\"act\" onChange={handleSelectChange}>{acts.map((a) => \n                    <option key={a.name} value={a.name}>{a.name}</option>)}\n                </select>\n                <select name=\"scene\" onChange={handleSelectChange}>{scenes.map((s) => \n                    <option key={s.name} value={s.name}>{s.name}</option>)}\n                </select>\n                <fieldset>\n                    <select name=\"character\" onChange={handleSelectChange}>{characters.map((c) => \n                        <option key={c} value={c}>{c}</option>)}\n                    </select>      \n                    <input type=\"text\" placeholder=\"Enter a search term\" onChange={handleTextChange}/>\n                </fieldset>\n                <Link to=\"/play-list\"><button>Close</button></Link>\n                <button onClick={handleFavouritesClick}>♥</button>\n            </div>\n        );\n    }\n    else {\n        return (\n            <div className=\"play-overview\">\n                <h1>{props.play.title}</h1>\n                <p>{props.play.synopsis}</p>\n                <Link to=\"/play-list\"><button>Close</button></Link>\n                <button onClick={handleFavouritesClick}>♥</button>\n            </div>\n        );\n    }\n};\n\nexport default PlayOverview","import React from \"react\";\nimport \"./css/PlayDataTabBar.css\";\n\nconst PlayDataTabBar = (props) => {\n    const handleOnClick = (e) => {\n        if (e.target.title !== props.currentTab) {\n            //toggle active tabs\n            e.target.classList.toggle(\"active\");\n            props.setCurrentTab(e.target.title);\n        }\n    }\n    \n    const getClassName = (t) => {\n        //set initial active tab\n        return (t === props.currentTab ? \"active\" : \"\");\n    }\n    \n    return (\n        <div className=\"tab-bar\">\n            {props.tabs.map((t) => \n                <button className={getClassName(t)} key={t} title={t} onClick={handleOnClick}>{t}</button>\n            )}\n        </div>\n    );\n};\n\nexport default PlayDataTabBar","import React from \"react\";\nimport Highlighter from \"react-highlight-words\";\nimport \"./css/PlayDataView.css\";\n\nconst PlayDataView = (props) => {\n    const highlightText = (text) => {\n        //replace found search text, with text wrapped in strong element\n        const searchText = props.searchText;\n        return (text.replace(searchText, \"<strong>\" + searchText + \"</strong>\"));\n    }\n    \n    //display data according to current tab\n    if (props.currentTab === \"Details\") {\n        return (\n            <div className=\"data-view\">\n                <p><strong>Likely date of composition:</strong> {props.play.likelyDate}</p>\n                <p><strong>Genre:</strong> {props.play.genre}</p>\n                <p><strong>Wiki Link:</strong> <a href={props.play.wiki}>{props.play.wiki}</a></p>\n                <p><strong>Gutenberg:</strong> <a href={props.play.gutenberg}>{props.play.gutenberg}</a></p>\n                <p><strong>Shakespeare.org Link:</strong> <a href={props.play.shakespeareOrg}>{props.play.shakespeareOrg}</a></p>\n                <p><strong>Description:</strong></p>\n                <p>{props.play.desc}</p>\n            </div>\n        );\n    }\n    else if (props.playData === null || props.currentAct === null) {\n        return (\n            <div className=\"data-view\"></div>\n        );\n    }\n    else if (props.currentTab === \"Characters\") {\n        return (\n            <div className=\"data-view\">\n                {props.playData.persona.map((p) =>\n                    <p key={p.player}><strong>{p.player}</strong> - {p.desc ? p.desc : \"No description\"}</p>\n                )}\n            </div>\n        );\n    }\n    else {\n        return (\n            <div className=\"data-view\">\n                <h2>{props.playData.title}</h2>\n                <article id=\"actHere\">\n                    <h3>{props.currentAct.name}</h3>\n                    <div id=\"sceneHere\">\n                        <h4>{props.currentScene.name}</h4>\n                        <p>{props.currentScene.title}</p>\n                        <p>{props.currentScene.stageDirection}</p>\n                        {props.currentScene.speeches.filter((s) => \n                            //if 'all players' is selected return all speeches\n                            //else return speeches based on current character\n                            props.currentCharacter === \"All Players\" ? true : props.currentCharacter === s.speaker\n                        ).map((s, i) => \n                            <div key={i}>\n                                <p className=\"speaker\"><strong>{s.speaker}</strong></p>\n                                {s.lines.map((l, i) => \n                                    <p className=\"line\" key={i}>\n                                         <Highlighter searchWords={[props.searchText]} textToHighlight={l}/>\n                                    </p>\n                                )}\n                            </div>\n                        )}\n                    </div>\n                </article>\n            </div>\n        );\n    }\n};\n\nexport default PlayDataView","import React from \"react\";\nimport PlayDataTabBar from \"./PlayDataTabBar.js\";\nimport PlayDataView from \"./PlayDataView.js\";\n\nconst PlayData = (props) => {\n    return (\n        <div className=\"container\">\n            <PlayDataTabBar tabs={props.tabs} \n                            currentTab={props.currentTab} \n                            setCurrentTab={props.setCurrentTab}/>\n            <hr/>\n            <PlayDataView currentTab={props.currentTab} \n                          play={props.play} \n                          playData={props.playData}\n                          currentAct={props.currentAct}\n                          currentScene={props.currentScene}\n                          currentCharacter={props.currentCharacter}\n                          searchText={props.searchText}/>\n            <hr/>\n        </div>\n    );\n}\n\nexport default PlayData","import React from \"react\";\nimport FavouritesList from \"./FavouritesList.js\";\nimport PlayOverview from \"./PlayOverview.js\";\nimport PlayData from \"./PlayData.js\";\nimport \"./css/PlayDetailApp.css\";\n\nclass PlayDetailApp extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        //initialize available tabs\n        const tabs = [\"Details\", \"Characters\", \"Text\"];\n        \n        //initialize state values\n        this.state = {currentTab: tabs[0],\n                      tabs: props.play.filename ? tabs : [tabs[0]],\n                      playData: [],\n                      currentAct: null,\n                      currentScene: null,\n                      currentCharacter: \"All Players\",\n                      searchText: \"\"};\n    }\n                            \n    async componentDidMount() {\n        //only get data if filename is not null\n        if (this.props.play.filename) {\n            //find saved data with play id\n            const foundPlayData = this.props.savedPlayData.find((p) => p.id === this.props.play.id);\n            \n            //if not saved data is found, fetch\n            if (!foundPlayData) {\n                try {\n                    const url = \"https://www.randyconnolly.com//funwebdev/3rd/api/shakespeare/play.php?name=\" + this.props.play.id;\n                    const response = await fetch(url);\n                    const data = await response.json();\n                    this.setState({playData: data});\n                    \n                    //set current act and scene with first in arrays\n                    this.setState({currentAct: data.acts[0]});\n                    this.setState({currentScene: data.acts[0].scenes[0]});\n                    \n                    //save play data\n                    this.props.savePlayData(this.props.play, data);\n                    //console.log(data);\n                } \n                catch {\n                    console.error(\"fetch error\");\n                }\n            }\n            else {\n                //if saved play data is found, set state values\n                this.setState({playData: foundPlayData.data});\n                this.setState({currentAct: foundPlayData.data.acts[0]});\n                this.setState({currentScene: foundPlayData.data.acts[0].scenes[0]});\n            }\n        }\n    }\n    \n    render() {\n        const setCurrentTab = (tab) => {\n            this.setState({currentTab: tab});\n        }\n        \n        const setPlayFilter = (name, value) => {\n            if (name === \"act\") {\n                //find act from play data and set first scene\n                const foundAct = this.state.playData.acts.find((a) => a.name === value);\n                this.setState({currentAct: foundAct});\n                this.setState({currentScene: foundAct.scenes[0]});\n                this.setState({currentCharacter: \"All Players\"});\n            }\n            else if (name === \"scene\") {\n                //find scene from current act\n                const foundScene = this.state.currentAct.scenes.find((s) => s.name === value);\n                this.setState({currentScene: foundScene});\n                this.setState({currentCharacter: \"All Players\"});\n            }\n            else if (name === \"character\") {\n                //set current character\n                this.setState({currentCharacter: value});\n            }\n        }\n        \n        const setSearchText = (text) => {\n            this.setState({searchText: text});\n        }\n        \n        return (\n            <div className=\"play-detail hide-favourites\">\n                <FavouritesList favourites={this.props.favourites} \n                                removeFromFavourites={this.props.removeFromFavourites}/>\n                <PlayOverview currentTab={this.state.currentTab} \n                              play={this.props.play} \n                              playData={this.state.playData} \n                              currentAct={this.state.currentAct} \n                              currentScene={this.state.currentScene} \n                              addToFavourites={this.props.addToFavourites}\n                              setPlayFilter={setPlayFilter}\n                              setSearchText={setSearchText}/>\n                <PlayData currentTab={this.state.currentTab} \n                          tabs={this.state.tabs} \n                          play={this.props.play} \n                          playData={this.state.playData} \n                          currentAct={this.state.currentAct}\n                          currentScene={this.state.currentScene}\n                          currentCharacter={this.state.currentCharacter}\n                          searchText={this.state.searchText}\n                          setCurrentTab={setCurrentTab}/>\n            </div>\n        );\n    }\n};\n\nexport default PlayDetailApp","import React from \"react\";\nimport Modal from 'react-modal';\nimport \"./css/About.css\";\n\nconst About = (props) => {\n    const handleOnClick = () => {\n        props.toggleModal();\n    }\n    \n    return (\n        <Modal isOpen={props.modalIsOpen} contentLabel=\"Example Modal\" className=\"about\">\n            <h1>About</h1>\n            <p className=\"subtitle\">Group Members</p>\n            <p>Brian Atuh</p>\n            <p className=\"subtitle\">GitHub Link</p>\n            <p><a href=\"https://github.com/batuh836/comp4513_assignment1\">Comp4513_Assignment1</a></p>\n            <button onClick={handleOnClick}>Close</button>\n        </Modal>\n    );\n};\n\nexport default About","import React from \"react\";\nimport './App.css';\nimport {CSSTransitionGroup} from 'react-transition-group';\nimport {Route} from 'react-router-dom';\nimport {cloneDeep, uniq} from 'lodash';\nimport Header from \"./components/Header.js\";\nimport Home from \"./components/Home.js\";\nimport PlayList from \"./components/PlayList.js\";\nimport PlayDetailApp from \"./components/PlayDetailApp.js\";\nimport About from \"./components/About.js\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        //set states to initial values\n        this.state = {plays: [],\n                      genres: [],\n                      currentPlay: null,\n                      filteredPlays: [],\n                      favourites: [],\n                      savedPlayData: [],\n                      modalIsOpen: false};\n    }\n                            \n    async componentDidMount() {\n        //only get data if plays is empty\n        if (!this.state.plays.length) {\n            try {\n                const url = \"https://www.randyconnolly.com//funwebdev/3rd/api/shakespeare/list.php\";\n                const response = await fetch(url);\n                const data = await response.json();\n                this.setState({plays: data});\n                this.setState({filteredPlays: data});\n                \n                //add unique genres to state\n                var genres = [\"\"];\n                genres.push(...uniq(data.map((p) => p.genre)));\n                this.setState({genres: genres});\n            } \n            catch {\n                console.error(\"fetch error\");\n            }\n        }\n    }\n    \n    render() {\n        //methods\n        const setCurrentPlay = (play) => {\n            this.setState({currentPlay: play});\n        }\n        \n        const toggleModal = () => {\n            if (this.state.modalIsOpen) {\n                this.setState({modalIsOpen: false});\n            }\n            else {\n                this.setState({modalIsOpen: true});\n            }\n        }\n        \n        const setFilteredPlays = (filters, orderType, reset) => {\n            var filteredPlays = reset ? cloneDeep(this.state.plays) : cloneDeep(this.state.filteredPlays); \n            \n            //filter by title\n            if (filters.title) {\n                filteredPlays = filteredPlays.filter((p) => \n                                    p.title.toLowerCase().includes(filters.title.toLowerCase()));\n            }\n            \n            //filter by beforeYear, if enabled\n            if (filters.before && filters.beforeYear) {\n                filteredPlays = filteredPlays.filter((p) => \n                                    p.likelyDate < filters.beforeYear);\n            }\n            \n            //filter by afterYear, if enabled\n            if (filters.after && filters.afterYear) {\n                filteredPlays = filteredPlays.filter((p) => \n                                    p.likelyDate > filters.afterYear);\n            }\n            \n            //filter by genre\n            if (filters.genre) {\n                filteredPlays = filteredPlays.filter((p) => \n                                    p.genre === filters.genre);\n            }\n            \n            //order filtered plays\n            if (orderType) {\n                if (orderType === \"title\") {\n                    filteredPlays = filteredPlays.sort((a,b) => {\n                                        let aTitle = a.title.toLowerCase();\n                                        let bTitle = b.title.toLowerCase(); \n                                        if (aTitle > bTitle) {return 1}\n                                        else if (aTitle < bTitle) {return -1}\n                                        else {return 0}\n                                    });\n                }\n                else if (orderType === \"year\") {\n                    filteredPlays = filteredPlays.sort((a,b) => \n                                        Number(a.likelyDate) - Number(b.likelyDate));\n                }\n            }\n            \n//            console.log(filters);\n//            console.log(filteredPlays);\n            this.setState({filteredPlays: filteredPlays});\n        }\n        \n        const addToFavourites = (play) => {\n            const favouritesCopy = [...this.state.favourites];\n            \n            //prevent duplicates from being added\n            if (!favouritesCopy.find((p) => p.id === play.id)) {\n                favouritesCopy.push(play);\n            }\n            \n            this.setState({favourites: favouritesCopy});\n        }\n        \n        const removeFromFavourites = (play) => {\n            const favouritesCopy = [...this.state.favourites];\n            \n            //get index of play and remove it\n            const index = favouritesCopy.findIndex((p) => p.id === play.id);\n            favouritesCopy.splice(index, 1);\n            this.setState({favourites: favouritesCopy});\n        }\n        \n        const savePlayData = (play, data) => {\n            const playDataCopy = cloneDeep(this.state.savedPlayData);\n            \n            //save play data with corresponding id\n            playDataCopy.push({id: play.id, data: data});\n            this.setState({savedPlayData: playDataCopy});\n        }\n        \n        return (\n            <div className=\"app\">\n                <Route path=\"/\" exact>\n                    <CSSTransitionGroup transitionName=\"landing\" \n                                        transitionAppear={true} \n                                        transitionAppearTimeout={500}\n                                        transitionEnterTimeout={500} \n                                        transitionLeaveTimeout={500}>\n                        <Home setFilteredPlays={setFilteredPlays}/>\n                    </CSSTransitionGroup>\n                </Route>\n                <Route path=\"/play-list\" exact>\n                    <Header toggleModal={toggleModal}/>\n                    <PlayList plays={this.state.filteredPlays}\n                              genres={this.state.genres}\n                              favourites={this.state.favourites}\n                              filters={this.state.filters}\n                              setFilteredPlays={setFilteredPlays} \n                              addToFavourites={addToFavourites}\n                              removeFromFavourites={removeFromFavourites}\n                              setCurrentPlay={setCurrentPlay}/>\n                </Route>\n                <Route path=\"/play-detail\" exact>\n                    <Header toggleModal={toggleModal}/>\n                    <PlayDetailApp play={this.state.currentPlay}\n                                   savedPlayData={this.state.savedPlayData}\n                                   favourites={this.state.favourites}\n                                   addToFavourites={addToFavourites}\n                                   removeFromFavourites={removeFromFavourites}\n                                   savePlayData={savePlayData}/>\n                </Route>\n                <About modalIsOpen={this.state.modalIsOpen} toggleModal={toggleModal}/>\n            </div>\n        );                \n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter><App/></BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}